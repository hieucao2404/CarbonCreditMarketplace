{
  "info": {
    "name": "Carbon Credit Marketplace - JWT Auth",
    "description": "Complete JWT authentication testing for Carbon Credit Marketplace",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "jwt_token",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "1. Register User",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test(\"User registered successfully\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.success).to.eql(true);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"username\": \"evowner2\",\n  \"email\": \"evowner2@example.com\",\n  \"password\": \"EV123456\",\n  \"fullName\": \"EV Owner Two\",\n  \"phone\": \"5555555555\",\n  \"role\": \"EV_OWNER\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/api/users/register",
          "host": ["{{base_url}}"],
          "path": ["api", "users", "register"]
        }
      },
      "response": []
    },
    {
      "name": "2. Login (Get JWT Token)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Login successful\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.success).to.eql(true);",
              "    pm.expect(jsonData.data.token).to.exist;",
              "});",
              "",
              "// Save JWT token to environment variable",
              "var responseJson = pm.response.json();",
              "if (responseJson.success && responseJson.data.token) {",
              "    pm.collectionVariables.set(\"jwt_token\", responseJson.data.token);",
              "    console.log(\"JWT Token saved:\", responseJson.data.token);",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"username\": \"evowner2\",\n  \"password\": \"EV123456\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/api/users/login",
          "host": ["{{base_url}}"],
          "path": ["api", "users", "login"]
        }
      },
      "response": []
    },
    {
      "name": "3. Get Current User (JWT Auth)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"User data retrieved\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.success).to.eql(true);",
              "    pm.expect(jsonData.data.username).to.exist;",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{jwt_token}}",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/api/users/me",
          "host": ["{{base_url}}"],
          "path": ["api", "users", "me"]
        }
      },
      "response": []
    },
    {
      "name": "4. Create Journey (JWT Auth)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{jwt_token}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"vehicle\": {\n    \"id\": \"77777777-7777-7777-7777-777777777777\"\n  },\n  \"distanceKm\": 150.5,\n  \"energyConsumedKwh\": 28.3,\n  \"startTime\": \"2025-10-24T08:00:00\",\n  \"endTime\": \"2025-10-24T10:30:00\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/api/journeys",
          "host": ["{{base_url}}"],
          "path": ["api", "journeys"]
        }
      },
      "response": []
    },
    {
      "name": "5. Get My Journeys (JWT Auth)",
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{jwt_token}}",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/api/journeys/my-journeys",
          "host": ["{{base_url}}"],
          "path": ["api", "journeys", "my-journeys"]
        }
      },
      "response": []
    },
    {
      "name": "6. Login Failed (Wrong Password)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 401\", function () {",
              "    pm.response.to.have.status(401);",
              "});",
              "",
              "pm.test(\"Login failed message\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.success).to.eql(false);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"username\": \"evowner2\",\n  \"password\": \"WrongPassword\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/api/users/login",
          "host": ["{{base_url}}"],
          "path": ["api", "users", "login"]
        }
      },
      "response": []
    },
    {
      "name": "7. Unauthorized Access (No Token)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 401 or 403\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([401, 403]);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/api/users/me",
          "host": ["{{base_url}}"],
          "path": ["api", "users", "me"]
        }
      },
      "response": []
    }
  ]
}
