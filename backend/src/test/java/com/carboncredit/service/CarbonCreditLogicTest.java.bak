package com.carboncredit.service;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.util.Optional;
import java.util.UUID;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;

import com.carboncredit.entity.CarbonCredit;
import com.carboncredit.entity.CarbonCredit.CreditStatus;
import com.carboncredit.entity.JourneyData;
import com.carboncredit.entity.User;
import com.carboncredit.repository.CarbonCreditRepository;
import com.carboncredit.repository.JourneyDataRepository;

@SpringBootTest
@ActiveProfiles("test")
public class CarbonCreditLogicTest {

    @Mock
    private CarbonCreditRepository carbonCreditRepository;
    @Mock
    private JourneyDataRepository journeyDataRepository;

    private CarbonCreditService carbonCreditService;
    private User testUser;
    private JourneyData testJourney;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        carbonCreditService = new CarbonCreditService(carbonCreditRepository, journeyDataRepository); // Fixed typo

        // setup test data
        testUser = new User();
        testUser.setId(UUID.randomUUID());
        testUser.setUsername("testuser");

        testJourney = new JourneyData();
        testJourney.setId(UUID.randomUUID());
        testJourney.setUser(testUser);
        testJourney.setDistanceKm(new BigDecimal("100")); // Fixed: was null
        testJourney.setEnergyConsumedKwh(new BigDecimal("25"));
        testJourney.setCo2ReducedKg(new BigDecimal("8.50"));
    }

    @Test
    @DisplayName("Test CO2 Calculation - Various Scenarios")
    public void testCO2CalculationScenarios() {
        System.out.println("\n=== CO2 calculation test ===");

        // Test case 1: normal EV journey (positive reduction)
        BigDecimal reduction1 = carbonCreditService.calculateCO2Reduction(new BigDecimal("100"), new BigDecimal("25"));
        System.out.println("100km, 25kWh -> CO2 reduction: " + reduction1 + "kg");
        assertEquals(0, new BigDecimal("8.50").compareTo(reduction1));

        // Test Case 2: Very short trip
        BigDecimal reduction2 = carbonCreditService.calculateCO2Reduction(
                new BigDecimal("10"), new BigDecimal("5"));
        System.out.println("10km, 5kWh -> CO2 reduction: " + reduction2 + "kg");
        assertTrue(reduction2.compareTo(BigDecimal.ZERO) >= 0);

        // Test Case 3: Dirty grid scenario (might be negative)
        BigDecimal reduction3 = carbonCreditService.calculateCO2Reduction(
                new BigDecimal("10"), new BigDecimal("15"));
        System.out.println("10km, 15kWh -> CO2 reduction: " + reduction3 + "kg");
        // Should be zero (non-negative guarantee)
        assertEquals(0, BigDecimal.ZERO.compareTo(reduction3));

        // Test Case 4: Long highway trip
        BigDecimal reduction4 = carbonCreditService.calculateCO2Reduction(
                new BigDecimal("500"), new BigDecimal("80"));
        System.out.println("500km, 80kWh -> CO2 reduction: " + reduction4 + "kg");
        assertTrue(reduction4.compareTo(new BigDecimal("50")) > 0);
    }

    @Test
    @DisplayName("Test Create Carbon Credit")
    public void testCreateCarbonCredit() {
        System.out.println("\n=== Carbon Credit Creation Test ===");

        // Mock repository response
        CarbonCredit savedCredit = new CarbonCredit();
        savedCredit.setId(UUID.randomUUID());
        savedCredit.setUser(testUser);
        savedCredit.setJourney(testJourney);
        savedCredit.setStatus(CreditStatus.PENDING);
        savedCredit.setCo2ReducedKg(testJourney.getCo2ReducedKg());

        when(carbonCreditRepository.save(any(CarbonCredit.class))).thenReturn(savedCredit);

        // Test credit creation
        CarbonCredit result = carbonCreditService.createCarbonCredit(testJourney);
        System.out.println("Created credit ID: " + result.getId());
        System.out.println("Status: " + result.getStatus());
        System.out.println("CO2 Amount: " + result.getCo2ReducedKg());

        assertNotNull(result);
        assertEquals(CreditStatus.PENDING, result.getStatus());
        assertEquals(testUser, result.getUser());
        assertEquals(testJourney, result.getJourney());

        verify(carbonCreditRepository, times(1)).save(any(CarbonCredit.class));
    }

    @Test
    @DisplayName("Test Credit Verification Workflow")
    public void testCreditVerificationWorkflow() {
        System.out.println("\n=== Credit Verification Workflow Test ===");

        // Set up existing credit
        CarbonCredit existingCredit = new CarbonCredit();
        existingCredit.setId(UUID.randomUUID());
        existingCredit.setStatus(CreditStatus.PENDING);
        existingCredit.setCo2ReducedKg(new BigDecimal("25.00"));

        when(carbonCreditRepository.findById(any(UUID.class))).thenReturn(Optional.of(existingCredit));
        when(carbonCreditRepository.save(any(CarbonCredit.class))).thenReturn(existingCredit);

        // Test Verification
        CarbonCredit verified = carbonCreditService.verifyCarbonCredit(existingCredit.getId(), testUser);

        System.out.println("Original status: PENDING");
        System.out.println("New status: " + verified.getStatus());
        System.out.println("Verified at: " + verified.getVerifiedAt());

        assertEquals(CreditStatus.VERIFIED, verified.getStatus());
        assertNotNull(verified.getVerifiedAt());

        // Test rejection
        existingCredit.setStatus(CreditStatus.PENDING); // reset for rejection
        CarbonCredit rejected = carbonCreditService.rejectCarbonCredit(existingCredit.getId(), testUser);

        System.out.println("Rejected status: " + rejected.getStatus());
        assertEquals(CreditStatus.REJECTED, rejected.getStatus());
    }

    @Test
    @DisplayName("Test Credit Listing and Sale Workflow")
    public void testCreditListingAndSaleWorkflow() {
        System.out.println("\n=== Credit Listing and Sale Workflow ===");

        // Set up verified credit
        CarbonCredit verifiedCredit = new CarbonCredit();
        verifiedCredit.setId(UUID.randomUUID());
        verifiedCredit.setStatus(CreditStatus.VERIFIED);
        verifiedCredit.setCo2ReducedKg(new BigDecimal("30.00"));
        verifiedCredit.setUser(testUser);
        verifiedCredit.setCreditAmount(new BigDecimal("0.030"));

        when(carbonCreditRepository.findById(any(UUID.class))).thenReturn(Optional.of(verifiedCredit));
        when(carbonCreditRepository.save(any(CarbonCredit.class))).thenReturn(verifiedCredit);

        // Test listing
        CarbonCredit listed = carbonCreditService.listCarbonCredit(verifiedCredit.getId(), testUser);

        System.out.println("Status after listing: " + listed.getStatus());
        System.out.println("Listed at: " + listed.getListedAt());

        assertEquals(CreditStatus.LISTED, listed.getStatus());
        assertNotNull(listed.getListedAt());

        // Test sale
        verifiedCredit.setStatus(CreditStatus.LISTED); // Update status for sale test
        CarbonCredit sold = carbonCreditService.markAsSold(verifiedCredit.getId());

        System.out.println("Status after sale: " + sold.getStatus());
        assertEquals(CreditStatus.SOLD, sold.getStatus());
    }

    @Test 
    @DisplayName("Test Credit Amount Calculation Tiers")
    public void testCreditAmountCalculationTiers() throws Exception {
        System.out.println("\n=== Credit Amount Calculation Tiers Test ===");

        Method method = CarbonCreditService.class.getDeclaredMethod("calculateCreditAmount", BigDecimal.class, CreditStatus.class);
        method.setAccessible(true);

        // Test different co2 amounts and their tier multipliers
        BigDecimal[] co2Amounts = {
            new BigDecimal("2.0"),    // Short trip (0.5x)
            new BigDecimal("10.0"),   // Regular trip (1.0x)
            new BigDecimal("25.0"),   // Medium trip (1.2x)
            new BigDecimal("60.0")    // Long trip (1.5x)
        };

        String[] tripTypes = {"Short", "Regular", "Medium", "Long"};

        for(int i = 0; i < co2Amounts.length; i++) {
            BigDecimal pendingCredits = (BigDecimal) method.invoke(carbonCreditService, co2Amounts[i], CreditStatus.PENDING);
            BigDecimal verifiedCredits = (BigDecimal) method.invoke(carbonCreditService, co2Amounts[i], CreditStatus.VERIFIED);

            System.out.printf("%s trip (%.1f kg CO2): PENDING=%.6f, VERIFIED=%.6f credits%n",
                tripTypes[i], co2Amounts[i], pendingCredits, verifiedCredits);
            
            // Verified should always be higher than pending
            assertTrue(verifiedCredits.compareTo(pendingCredits) > 0);
        }
    } // Fixed missing closing brace

    @Test
    @DisplayName("Test Error Scenarios")
    public void testErrorScenarios() {
        System.out.println("\n=== Error Scenarios Test ===");

        // Test Credit not found
        when(carbonCreditRepository.findById(any(UUID.class))).thenReturn(Optional.empty());

        UUID nonExistentId = UUID.randomUUID();

        // Should throw RuntimeException for non-existent credit
        assertThrows(RuntimeException.class, () -> {
            carbonCreditService.verifyCarbonCredit(nonExistentId, testUser);
        });
        System.out.println("✓ Verification of non-existent credit throws exception");

        assertThrows(RuntimeException.class, () -> {
            carbonCreditService.listCarbonCredit(nonExistentId, testUser);
        });
        System.out.println("✓ Listing of non-existent credit throws exception");

        // Test invalid status transitions
        CarbonCredit pendingCredit = new CarbonCredit();
        pendingCredit.setId(UUID.randomUUID());
        pendingCredit.setStatus(CreditStatus.PENDING);
        pendingCredit.setUser(testUser);

        when(carbonCreditRepository.findById(any(UUID.class))).thenReturn(Optional.of(pendingCredit));

        assertThrows(IllegalStateException.class, () -> {
            carbonCreditService.listCarbonCredit(pendingCredit.getId(), testUser);
        });
        System.out.println("✓ Listing non-verified credit throws exception");
    }

    @Test
    @DisplayName("Test Complete Integration Workflow")
    public void testCompleteIntegrationWorkflow() throws Exception {
        System.out.println("\n=== Complete Integration Workflow ===");

        // Step 1: Calculate CO2 for a journey
        BigDecimal distance = new BigDecimal("200");
        BigDecimal energy = new BigDecimal("45");
        BigDecimal co2Reduction = carbonCreditService.calculateCO2Reduction(distance, energy);

        System.out.println("1. Journey: " + distance + "km, " + energy + "kWh");
        System.out.println("   CO2 Reduction: " + co2Reduction + "kg");
        
        // Step 2: Create journey and credit
        testJourney.setDistanceKm(distance);
        testJourney.setEnergyConsumedKwh(energy);
        testJourney.setCo2ReducedKg(co2Reduction);

        CarbonCredit mockCredit = new CarbonCredit();
        mockCredit.setId(UUID.randomUUID());
        mockCredit.setStatus(CreditStatus.PENDING);
        mockCredit.setCo2ReducedKg(co2Reduction);
        mockCredit.setUser(testUser);
        mockCredit.setCreditAmount(new BigDecimal("0.042"));

        when(carbonCreditRepository.save(any(CarbonCredit.class))).thenReturn(mockCredit);
        when(carbonCreditRepository.findById(any(UUID.class))).thenReturn(Optional.of(mockCredit));

        CarbonCredit created = carbonCreditService.createCarbonCredit(testJourney);
        System.out.println("2. Credit created with ID: " + created.getId());
        System.out.println("   Status: " + created.getStatus());

        // Step 3: Verify credit
        CarbonCredit verified = carbonCreditService.verifyCarbonCredit(created.getId(), testUser);
        System.out.println("3. Credit verified at: " + verified.getVerifiedAt());
        
        // Step 4: List credit
        mockCredit.setStatus(CreditStatus.VERIFIED); // Update mock for listing
        CarbonCredit listed = carbonCreditService.listCarbonCredit(created.getId(), testUser);
        System.out.println("4. Credit listed at: " + listed.getListedAt());

        // Step 5: Sell credit
        mockCredit.setStatus(CreditStatus.LISTED); // Update mock for sale
        CarbonCredit sold = carbonCreditService.markAsSold(created.getId());
        System.out.println("5. Credit sold with final status: " + sold.getStatus());
        
        // Verify complete workflow
        assertNotNull(created.getId());
        assertEquals(CreditStatus.SOLD, sold.getStatus());
        System.out.println("✓ Complete workflow executed successfully");
    }
}